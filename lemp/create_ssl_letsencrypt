#!/bin/bash
# MCE_LEMP create ssl let's encrypt
# Version: 1.0
# Author: mbrother

source /var/mce/script/variable_common
source ${BASH_DIR}/lang
[[ -f /var/mce/custom/lang ]] && source /var/mce/custom/lang

# Print space
printf_c(){
    if [ $1 -le 0 ]
    then
        echo ""
    else
        printf '%0.s─' $(seq 1 $1)
    fi
}

# Print domains
print_domain(){
    echo    " ┌─`printf_c ${#LANG_CREATE_SSL1}`─┐"
    echo -e " │ ${GREEN}${LANG_CREATE_SSL1}${REMOVE} │"
    echo    " └─`printf_c ${#LANG_CREATE_SSL1}`─┘"
    ls -1 ${USER_DIR} > /tmp/all_users
    VAR_TMP=1
    rm -f /tmp/all_domains
    for i in $(cat /tmp/all_users)
    do
        echo " ${VAR_TMP}. ${i} `cat ${USER_DIR}/${i}/domain`" >> /tmp/all_domains
        VAR_TMP=$[ ${VAR_TMP} + 1 ]
    done
    cat /tmp/all_domains | awk '{print $1 " " $3}'
}

# Check domain point to server
check_domain(){
    print_domain
    false
    while [ $? -eq 1 ]
    do
        DOMAIN_COUNT=`ls ${USER_DIR}/*/ | grep domain | wc -l`
        read -p  "${LANG_CREATE_SSL3} " CHOICE
        ${BASH_DIR}/check_value number "${CHOICE}" "${DOMAIN_COUNT}"
        if [ $? -eq 1 ]
        then
            if [ ${DOMAIN_COUNT} -eq 1 ]
            then
                echo -e "${RED}${LANG_CREATE_SSL15}${REMOVE}"
                false
            else
                echo -e "${RED}${LANG_CREATE_SSL4} ${DOMAIN_COUNT}!${REMOVE}"
                false
            fi
        fi
    done
    USER=`cat /tmp/all_domains | awk -v CHOICE2="${CHOICE}""."  '{if (CHOICE2 == $1) print $2}'`
    DOMAIN=`cat /tmp/all_domains | awk -v CHOICE2="${CHOICE}""."  '{if (CHOICE2 == $1) print $3}'`
}

# Install Let's Encrypt
install_letsencrypt(){
    if [ ! -f /usr/bin/certbot ]
    then
        echo -e " ${GREEN}${LANG_CREATE_SSL9}${REMOVE}"
        sleep 2
        yum -y install epel-release
        yum -y install certbot
    fi
}

# Create SSL Let's Encrypt
create_ssl(){
    echo -e "${GREEN} ${LANG_CREATE_SSL10} ${DOMAIN}...${REMOVE}"
    sleep 1
    if [ -f /etc/letsencrypt/renewal/${DOMAIN}.conf ]
    then
        echo -e "${RED}${LANG_CREATE_SSL17}${REMOVE} ${DOMAIN}!"
        exit
    else
        /usr/bin/certbot certonly --webroot -w /home/"${USER}"/public_html/ -d ${DOMAIN} <<EOletsencrypt
admin@${DOMAIN}
A
N
EOletsencrypt
    fi
    echo -e "${GREEN} ${LANG_CREATE_SSL11} ${DOMAIN}...${REMOVE}"
    sleep 1
    CHECK_VHOST_SSL=`cat ${VHOST_DIR}/"${DOMAIN}".conf | grep "listen 443" | wc -l`
    if [ ${CHECK_VHOST_SSL} -eq 0 ]
    then
        cat >> "${VHOST_DIR}/"${DOMAIN}".conf" <<EOvirtual_host
server {
    listen 443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;

    root /home/${USER}/public_html;
    index index.php index.html index.htm;

    server_name ${DOMAIN} www.${DOMAIN};

#       access_log /home/${USER}/logs/access-ssl.log;
#       error_log /home/${USER}/logs/error-ssl.log;
        access_log /home/${USER}/logs/traffic.log traffic;

    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)\$ {
        access_log        off;
        log_not_found     off;
        expires           max;
    }

    if (\$request_method = POST)
    {
        set \$no_cache 1;
    }
    if (\$query_string != "")
    {
        set \$no_cache 1;
    }
    if (\$request_uri ~* "/(admin|login|tim-kiem)")
    {
        set \$no_cache 1;
    }

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php\$ {
        try_files \$uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_pass ${USER};
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;

        fastcgi_cache_key \$scheme$host\$request_uri\$request_method;
        fastcgi_cache ${USER};
        fastcgi_cache_valid 200 400 302 40m;
        fastcgi_cache_methods GET HEAD;
        fastcgi_cache_use_stale updating error timeout invalid_header http_500 http_503 http_404;
        fastcgi_cache_bypass \$no_cache;
        fastcgi_no_cache \$no_cache;
        add_header X-Cache \$upstream_cache_status;
        fastcgi_buffering on;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 16k;
    }
}
EOvirtual_host

        if [ -f /bin/systemctl ]
        then
            systemctl reload nginx
        else
            service nginx reload
        fi
        echo "${LANG_CREATE_SSL5} ${DOMAIN}!"
    else
        echo "${LANG_CREATE_SSL5} ${DOMAIN}!"
        echo "${LANG_CREATE_SSL6}"
        echo ""
        echo "/etc/letsencrypt/live/${DOMAIN}"
        echo ""
    fi
}

# Create cron auto renew SSL
auto_renew_ssl(){
    if [ ! -f /var/spool/cron/root ]
    then
        echo "0 2 * * * /usr/bin/certbot renew" >> /var/spool/cron/root
        echo "15 2 * * * /sbin/service nginx reload" >> /var/spool/cron/root
        if [ -f /bin/systemctl ]
        then
            systemctl restart crond
        else
            /etc/init.d/crond restart > /dev/null
        fi
        echo "${LANG_CREATE_SSL7}"
    else
        CHECK_CRON=`cat /var/spool/cron/root | grep "certbot renew" | wc -l`
        if [ ${CHECK_CRON} -eq 1 ]
        then
            echo "${LANG_CREATE_SSL8}"
        else
            echo "0 2 * * * /usr/bin/certbot renew" >> /var/spool/cron/root
            echo "15 2 * * * /sbin/service nginx reload" >> /var/spool/cron/root
            if [ -f /bin/systemctl ]
            then
                systemctl restart crond
            else
                /etc/init.d/crond restart > /dev/null
            fi
            echo "${LANG_CREATE_SSL7}"
        fi
    fi
}

if [[ -z "$(ls ${USER_DIR})" ]] || [[ $(cat ${USER_DIR}/*/domain | wc -l) -eq 0 ]]
then
    echo -e "${RED}${LANG_CREATE_SSL2}${REMOVE}"
    exit
fi
check_domain
install_letsencrypt
create_ssl
auto_renew_ssl

rm -f /tmp/all_users
rm -f /tmp/all_domains
